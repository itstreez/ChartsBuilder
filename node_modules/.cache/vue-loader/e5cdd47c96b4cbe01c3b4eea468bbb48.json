{"remainingRequest":"/Users/eliomouhasseb3/Desktop/Documents/Internship-Project/project-charts copy/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eliomouhasseb3/Desktop/Documents/Internship-Project/project-charts copy/src/components/scatter.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eliomouhasseb3/Desktop/Documents/Internship-Project/project-charts copy/src/components/scatter.vue","mtime":1626155566165},{"path":"/Users/eliomouhasseb3/Desktop/Documents/Internship-Project/project-charts copy/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eliomouhasseb3/Desktop/Documents/Internship-Project/project-charts copy/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/eliomouhasseb3/Desktop/Documents/Internship-Project/project-charts copy/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eliomouhasseb3/Desktop/Documents/Internship-Project/project-charts copy/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KCmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJwpleHBvcnQgZGVmYXVsdCB7CiAgcHJvcHM6IFsKICAgICdpbnB1dERhdGEnCgogIF0sCiAgZGF0YSAoKSB7CiAgICByZXR1cm4gewogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgY2hhbmdldGhlbWUgKGNvbG9yKSB7CiAgICAgIGQzLnNlbGVjdEFsbCgncGF0aCcpCiAgICAgICAgLnRyYW5zaXRpb24oKQogICAgICAgIC5kdXJhdGlvbigyMDAwKQogICAgICAgIC5zdHlsZSgnZmlsbCcsIGNvbG9yKQogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gKCkgewogIC8vIHNldCB0aGUgZGltZW5zaW9ucyBhbmQgbWFyZ2lucyBvZiB0aGUgZ3JhcGgKICAgIGNvbnN0IG1hcmdpbiA9IHsgdG9wOiAzMCwgcmlnaHQ6IDMwLCBib3R0b206IDcwLCBsZWZ0OiA2MCB9CiAgICBjb25zdCB3aWR0aCA9IDU1MCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0CiAgICBjb25zdCBoZWlnaHQgPSA1MjAgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbQoKICAgIC8vIGFwcGVuZCB0aGUgc3ZnIG9iamVjdCB0byB0aGUgYm9keSBvZiB0aGUgcGFnZQogICAgdmFyIHN2ZyA9IGQzLnNlbGVjdCgnI3Rlc3QnKQogICAgICAuYXBwZW5kKCdzdmcnKQogICAgICAuYXR0cignd2lkdGgnLCB3aWR0aCArIG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0KQogICAgICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0ICsgbWFyZ2luLnRvcCArIG1hcmdpbi5ib3R0b20pCiAgICAgIC5hcHBlbmQoJ2cnKQogICAgICAuYXR0cigndHJhbnNmb3JtJywKICAgICAgICAndHJhbnNsYXRlKCcgKyBtYXJnaW4ubGVmdCArICcsJyArIG1hcmdpbi50b3AgKyAnKScpCgogICAgLy8gUmVhZCB0aGUgZGF0YQoKICAgIC8vIE5vdyBJIGNhbiB1c2UgdGhpcyBkYXRhc2V0OgogICAgLy8gQWRkIFggYXhpcyAtLT4gaXQgaXMgYSBkYXRlIGZvcm1hdAogICAgdmFyIHggPSBkMy5zY2FsZUxpbmVhcigpCiAgICAgIC5kb21haW4oZDMuZXh0ZW50KHRoaXMuaW5wdXREYXRhLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5sYWJlbDIgfSkpCiAgICAgIC5yYW5nZShbMCwgd2lkdGhdKQogICAgc3ZnLmFwcGVuZCgnZycpCiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsJyArIGhlaWdodCArICcpJykKICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4KSkKICAgICAgLnNlbGVjdEFsbCgndGV4dCcpCiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDEwLDApJykKICAgICAgLnN0eWxlKCd0ZXh0LWFuY2hvcicsICdlbmQnKQogICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsIDE1KQogICAgLy8gQWRkIFkgYXhpcwogICAgY29uc3QgbWF4ID0gTWF0aC5tYXguYXBwbHkobnVsbCwgdGhpcy5pbnB1dERhdGEubWFwKGl0ZW0gPT4gaXRlbS52YWx1ZSkpCiAgICB2YXIgeSA9IGQzLnNjYWxlTGluZWFyKCkKICAgICAgLmRvbWFpbihbMCwgbWF4XSkKICAgICAgLnJhbmdlKFtoZWlnaHQsIDBdKQogICAgc3ZnLmFwcGVuZCgnZycpCiAgICAgIC5jYWxsKGQzLmF4aXNMZWZ0KHkpKQogICAgICAuc2VsZWN0QWxsKCd0ZXh0JykKICAgICAgLnN0eWxlKCdmb250LXNpemUnLCAxNSkKICAgIC8vIEFkZCB0aGUgbGluZQogICAgc3ZnLmFwcGVuZCgncGF0aCcpCiAgICAgIC5kYXR1bSh0aGlzLmlucHV0RGF0YSkKICAgICAgLmF0dHIoJ2ZpbGwnLCAnbm9uZScpCiAgICAgIC5hdHRyKCdzdHJva2UnLCAnYmxhY2snKQogICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgMS41KQogICAgICAuYXR0cignZCcsIGQzLmxpbmUoKQogICAgICAgIC5jdXJ2ZShkMy5jdXJ2ZUJhc2lzKSAvLyBKdXN0IGFkZCB0aGF0IHRvIGhhdmUgYSBjdXJ2ZSBpbnN0ZWFkIG9mIHNlZ21lbnRzCiAgICAgICAgLngoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIHgoZC5sYWJlbDIpIH0pCiAgICAgICAgLnkoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIHkoZC52YWx1ZSkgfSkKICAgICAgKQogICAgLy8gQWRkIHRoZSBwb2ludHMKICAgIHN2ZwogICAgICAuYXBwZW5kKCdnJykKICAgICAgLnNlbGVjdEFsbCgnZG90JykKICAgICAgLmRhdGEodGhpcy5pbnB1dERhdGEpCiAgICAgIC5lbnRlcigpCiAgICAgIC5hcHBlbmQoJ2NpcmNsZScpCiAgICAgIC5hdHRyKCdjeCcsIGZ1bmN0aW9uIChkKSB7IHJldHVybiB4KGQubGFiZWwyKSB9KQogICAgICAuYXR0cignY3knLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4geShkLnZhbHVlKSB9KQogICAgICAuYXR0cigncicsIDUpCiAgICAgIC5hdHRyKCdmaWxsJywgJyM2OWIzYTInKQogIH0KfQoK"},{"version":3,"sources":["scatter.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"scatter.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<div id=\"test\">\n</div>\n</template>\n<script>\nimport * as d3 from 'd3'\nexport default {\n  props: [\n    'inputData'\n\n  ],\n  data () {\n    return {\n    }\n  },\n  methods: {\n    changetheme (color) {\n      d3.selectAll('path')\n        .transition()\n        .duration(2000)\n        .style('fill', color)\n    }\n  },\n  mounted: function () {\n  // set the dimensions and margins of the graph\n    const margin = { top: 30, right: 30, bottom: 70, left: 60 }\n    const width = 550 - margin.left - margin.right\n    const height = 520 - margin.top - margin.bottom\n\n    // append the svg object to the body of the page\n    var svg = d3.select('#test')\n      .append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .append('g')\n      .attr('transform',\n        'translate(' + margin.left + ',' + margin.top + ')')\n\n    // Read the data\n\n    // Now I can use this dataset:\n    // Add X axis --> it is a date format\n    var x = d3.scaleLinear()\n      .domain(d3.extent(this.inputData, function (d) { return d.label2 }))\n      .range([0, width])\n    svg.append('g')\n      .attr('transform', 'translate(0,' + height + ')')\n      .call(d3.axisBottom(x))\n      .selectAll('text')\n      .attr('transform', 'translate(10,0)')\n      .style('text-anchor', 'end')\n      .style('font-size', 15)\n    // Add Y axis\n    const max = Math.max.apply(null, this.inputData.map(item => item.value))\n    var y = d3.scaleLinear()\n      .domain([0, max])\n      .range([height, 0])\n    svg.append('g')\n      .call(d3.axisLeft(y))\n      .selectAll('text')\n      .style('font-size', 15)\n    // Add the line\n    svg.append('path')\n      .datum(this.inputData)\n      .attr('fill', 'none')\n      .attr('stroke', 'black')\n      .attr('stroke-width', 1.5)\n      .attr('d', d3.line()\n        .curve(d3.curveBasis) // Just add that to have a curve instead of segments\n        .x(function (d) { return x(d.label2) })\n        .y(function (d) { return y(d.value) })\n      )\n    // Add the points\n    svg\n      .append('g')\n      .selectAll('dot')\n      .data(this.inputData)\n      .enter()\n      .append('circle')\n      .attr('cx', function (d) { return x(d.label2) })\n      .attr('cy', function (d) { return y(d.value) })\n      .attr('r', 5)\n      .attr('fill', '#69b3a2')\n  }\n}\n\n</script>\n"]}]}