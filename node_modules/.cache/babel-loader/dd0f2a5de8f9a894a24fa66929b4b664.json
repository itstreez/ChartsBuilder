{"remainingRequest":"/Users/eliomouhasseb3/Desktop/Internship-Project/project-charts copy/node_modules/babel-loader/lib/index.js!/Users/eliomouhasseb3/Desktop/Internship-Project/project-charts copy/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/eliomouhasseb3/Desktop/Internship-Project/project-charts copy/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eliomouhasseb3/Desktop/Internship-Project/project-charts copy/src/components/scatter.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eliomouhasseb3/Desktop/Internship-Project/project-charts copy/src/components/scatter.vue","mtime":1626155566165},{"path":"/Users/eliomouhasseb3/Desktop/Internship-Project/project-charts copy/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eliomouhasseb3/Desktop/Internship-Project/project-charts copy/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/eliomouhasseb3/Desktop/Internship-Project/project-charts copy/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eliomouhasseb3/Desktop/Internship-Project/project-charts copy/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKLy8KLy8KLy8KLy8KaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnOwpleHBvcnQgZGVmYXVsdCB7CiAgcHJvcHM6IFsnaW5wdXREYXRhJ10sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7fTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGNoYW5nZXRoZW1lOiBmdW5jdGlvbiBjaGFuZ2V0aGVtZShjb2xvcikgewogICAgICBkMy5zZWxlY3RBbGwoJ3BhdGgnKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjAwMCkuc3R5bGUoJ2ZpbGwnLCBjb2xvcik7CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgLy8gc2V0IHRoZSBkaW1lbnNpb25zIGFuZCBtYXJnaW5zIG9mIHRoZSBncmFwaAogICAgdmFyIG1hcmdpbiA9IHsKICAgICAgdG9wOiAzMCwKICAgICAgcmlnaHQ6IDMwLAogICAgICBib3R0b206IDcwLAogICAgICBsZWZ0OiA2MAogICAgfTsKICAgIHZhciB3aWR0aCA9IDU1MCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0OwogICAgdmFyIGhlaWdodCA9IDUyMCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tOyAvLyBhcHBlbmQgdGhlIHN2ZyBvYmplY3QgdG8gdGhlIGJvZHkgb2YgdGhlIHBhZ2UKCiAgICB2YXIgc3ZnID0gZDMuc2VsZWN0KCcjdGVzdCcpLmFwcGVuZCgnc3ZnJykuYXR0cignd2lkdGgnLCB3aWR0aCArIG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0KS5hdHRyKCdoZWlnaHQnLCBoZWlnaHQgKyBtYXJnaW4udG9wICsgbWFyZ2luLmJvdHRvbSkuYXBwZW5kKCdnJykuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgbWFyZ2luLmxlZnQgKyAnLCcgKyBtYXJnaW4udG9wICsgJyknKTsgLy8gUmVhZCB0aGUgZGF0YQogICAgLy8gTm93IEkgY2FuIHVzZSB0aGlzIGRhdGFzZXQ6CiAgICAvLyBBZGQgWCBheGlzIC0tPiBpdCBpcyBhIGRhdGUgZm9ybWF0CgogICAgdmFyIHggPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihkMy5leHRlbnQodGhpcy5pbnB1dERhdGEsIGZ1bmN0aW9uIChkKSB7CiAgICAgIHJldHVybiBkLmxhYmVsMjsKICAgIH0pKS5yYW5nZShbMCwgd2lkdGhdKTsKICAgIHN2Zy5hcHBlbmQoJ2cnKS5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsJyArIGhlaWdodCArICcpJykuY2FsbChkMy5heGlzQm90dG9tKHgpKS5zZWxlY3RBbGwoJ3RleHQnKS5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDEwLDApJykuc3R5bGUoJ3RleHQtYW5jaG9yJywgJ2VuZCcpLnN0eWxlKCdmb250LXNpemUnLCAxNSk7IC8vIEFkZCBZIGF4aXMKCiAgICB2YXIgbWF4ID0gTWF0aC5tYXguYXBwbHkobnVsbCwgdGhpcy5pbnB1dERhdGEubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgIHJldHVybiBpdGVtLnZhbHVlOwogICAgfSkpOwogICAgdmFyIHkgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbMCwgbWF4XSkucmFuZ2UoW2hlaWdodCwgMF0pOwogICAgc3ZnLmFwcGVuZCgnZycpLmNhbGwoZDMuYXhpc0xlZnQoeSkpLnNlbGVjdEFsbCgndGV4dCcpLnN0eWxlKCdmb250LXNpemUnLCAxNSk7IC8vIEFkZCB0aGUgbGluZQoKICAgIHN2Zy5hcHBlbmQoJ3BhdGgnKS5kYXR1bSh0aGlzLmlucHV0RGF0YSkuYXR0cignZmlsbCcsICdub25lJykuYXR0cignc3Ryb2tlJywgJ2JsYWNrJykuYXR0cignc3Ryb2tlLXdpZHRoJywgMS41KS5hdHRyKCdkJywgZDMubGluZSgpLmN1cnZlKGQzLmN1cnZlQmFzaXMpIC8vIEp1c3QgYWRkIHRoYXQgdG8gaGF2ZSBhIGN1cnZlIGluc3RlYWQgb2Ygc2VnbWVudHMKICAgIC54KGZ1bmN0aW9uIChkKSB7CiAgICAgIHJldHVybiB4KGQubGFiZWwyKTsKICAgIH0pLnkoZnVuY3Rpb24gKGQpIHsKICAgICAgcmV0dXJuIHkoZC52YWx1ZSk7CiAgICB9KSk7IC8vIEFkZCB0aGUgcG9pbnRzCgogICAgc3ZnLmFwcGVuZCgnZycpLnNlbGVjdEFsbCgnZG90JykuZGF0YSh0aGlzLmlucHV0RGF0YSkuZW50ZXIoKS5hcHBlbmQoJ2NpcmNsZScpLmF0dHIoJ2N4JywgZnVuY3Rpb24gKGQpIHsKICAgICAgcmV0dXJuIHgoZC5sYWJlbDIpOwogICAgfSkuYXR0cignY3knLCBmdW5jdGlvbiAoZCkgewogICAgICByZXR1cm4geShkLnZhbHVlKTsKICAgIH0pLmF0dHIoJ3InLCA1KS5hdHRyKCdmaWxsJywgJyM2OWIzYTInKTsKICB9Cn07"},{"version":3,"sources":["scatter.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div id=\"test\">\n</div>\n</template>\n<script>\nimport * as d3 from 'd3'\nexport default {\n  props: [\n    'inputData'\n\n  ],\n  data () {\n    return {\n    }\n  },\n  methods: {\n    changetheme (color) {\n      d3.selectAll('path')\n        .transition()\n        .duration(2000)\n        .style('fill', color)\n    }\n  },\n  mounted: function () {\n  // set the dimensions and margins of the graph\n    const margin = { top: 30, right: 30, bottom: 70, left: 60 }\n    const width = 550 - margin.left - margin.right\n    const height = 520 - margin.top - margin.bottom\n\n    // append the svg object to the body of the page\n    var svg = d3.select('#test')\n      .append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .append('g')\n      .attr('transform',\n        'translate(' + margin.left + ',' + margin.top + ')')\n\n    // Read the data\n\n    // Now I can use this dataset:\n    // Add X axis --> it is a date format\n    var x = d3.scaleLinear()\n      .domain(d3.extent(this.inputData, function (d) { return d.label2 }))\n      .range([0, width])\n    svg.append('g')\n      .attr('transform', 'translate(0,' + height + ')')\n      .call(d3.axisBottom(x))\n      .selectAll('text')\n      .attr('transform', 'translate(10,0)')\n      .style('text-anchor', 'end')\n      .style('font-size', 15)\n    // Add Y axis\n    const max = Math.max.apply(null, this.inputData.map(item => item.value))\n    var y = d3.scaleLinear()\n      .domain([0, max])\n      .range([height, 0])\n    svg.append('g')\n      .call(d3.axisLeft(y))\n      .selectAll('text')\n      .style('font-size', 15)\n    // Add the line\n    svg.append('path')\n      .datum(this.inputData)\n      .attr('fill', 'none')\n      .attr('stroke', 'black')\n      .attr('stroke-width', 1.5)\n      .attr('d', d3.line()\n        .curve(d3.curveBasis) // Just add that to have a curve instead of segments\n        .x(function (d) { return x(d.label2) })\n        .y(function (d) { return y(d.value) })\n      )\n    // Add the points\n    svg\n      .append('g')\n      .selectAll('dot')\n      .data(this.inputData)\n      .enter()\n      .append('circle')\n      .attr('cx', function (d) { return x(d.label2) })\n      .attr('cy', function (d) { return y(d.value) })\n      .attr('r', 5)\n      .attr('fill', '#69b3a2')\n  }\n}\n\n</script>\n"],"sourceRoot":"src/components"}]}